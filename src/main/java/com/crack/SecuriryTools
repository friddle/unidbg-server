package com.mfw.core.login.util;

import android.taobao.windvane.cache.b;
import android.text.TextUtils;
import com.mfw.core.MFWCore;
import com.mfw.core.login.LoginCommon;
import com.mfw.core.login.UniRequestModel;
import com.mfw.core.login.security.Authorizer;
import java.io.UnsupportedEncodingException;
import java.net.URLEncoder;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Map;

public final class SecurityTools {
    private static final String DEFAULT_CHARSET = "UTF-8";
    private static Authorizer authorizer;

    public static void setAuthorizer(Authorizer authorizer2) {
        authorizer = authorizer2;
    }

    public static Authorizer getAuthorizer() {
        return authorizer;
    }

    public static String getOauthSignature(UniRequestModel request, Map<String, String> params, String tokenSecret) {
        return getOauthSignature(request.getMethod(), request.getRealUrl(), params, tokenSecret, false);
    }

    public static String getLoginOauthSignature(UniRequestModel request, Map<String, String> params) {
        return getOauthSignature(request.getMethod(), request.getRealUrl(), params, "", true);
    }

    public static String getOauthSignature(int method, String baseUri, Map<String, String> params, String tokenSecret, boolean isLogin) {
        String sMethod;
        removeOldSighParams(params);
        switch (method) {
            case 0:
                sMethod = "GET";
                break;
            case 1:
                sMethod = "POST";
                break;
            case 2:
                sMethod = "PUT";
                break;
            case 3:
                sMethod = "DELETE";
                break;
            default:
                sMethod = "GET";
                break;
        }
        return getOauthSignature(sMethod, baseUri, params, tokenSecret, isLogin);
    }

    private static String getOauthSignature(String method, String baseUri, Map<String, String> params, String tokenSecret, boolean isLogin) {
        if (TextUtils.isEmpty(method) || TextUtils.isEmpty(baseUri) || params == null) {
            return "";
        }
        return cryptoParams(encodePramas(method, baseUri, params), tokenSecret, isLogin);
    }

    public static String cryptoParams(String baseParams, String tokenSecret, boolean isLogin) {
        return authorizer.cryptoParams(MFWCore.getApplicationContext(), baseParams, encodeUrl(tokenSecret), Boolean.valueOf(isLogin));
    }

    private static String ghostSigh(String params) {
        return authorizer.ghostSigh(MFWCore.getApplicationContext(), params);
    }

    public static String encodeUrl(String value) {
        return encodeUrl(value, "UTF-8");
    }

    public static String encodeUrl(String value, String charsetName) {
        if (TextUtils.isEmpty(value)) {
            return "";
        }
        String encoded = "";
        try {
            encoded = URLEncoder.encode(value, charsetName);
        } catch (UnsupportedEncodingException ignore) {
            ignore.printStackTrace();
        }
        StringBuilder buf = new StringBuilder(encoded.length());
        int i = 0;
        while (i < encoded.length()) {
            char focus = encoded.charAt(i);
            if (focus == '*') {
                buf.append("%2A");
            } else if (focus == '+') {
                buf.append("%20");
            } else if (focus == '%' && i + 1 < encoded.length() && encoded.charAt(i + 1) == '7' && encoded.charAt(i + 2) == 'E') {
                buf.append(b.DIVISION);
                i += 2;
            } else {
                buf.append(focus);
            }
            i++;
        }
        return buf.toString();
    }

    private static String encodePramas(String method, String baseUri, Map<String, String> params) {
        return appendGhostSighParams(params, encodeUrl(method) + "&" + encodeUrl(baseUri) + "&" + encodeUrl(getNormalizedParams(params)));
    }

    private static String appendGhostSighParams(Map<String, String> params, String encodeParams) {
        String ghostSigh = ghostSigh(encodeParams);
        params.put(LoginCommon.HTTP_BASE_PARAM_GHOSTSIGH, ghostSigh);
        return encodeParams + encodeUrl("&") + encodeUrl(LoginCommon.HTTP_BASE_PARAM_GHOSTSIGH) + encodeUrl("=") + encodeUrl(ghostSigh);
    }

    private static void removeOldSighParams(Map<String, String> params) {
        if (params.containsKey(LoginCommon.HTTP_BASE_PARAM_GHOSTSIGH)) {
            params.remove(LoginCommon.HTTP_BASE_PARAM_GHOSTSIGH);
        }
        if (params.containsKey(LoginCommon.HTTP_BASE_PARAM_OAUTH_SIGNATURE)) {
            params.remove(LoginCommon.HTTP_BASE_PARAM_OAUTH_SIGNATURE);
        }
    }

    private static String getNormalizedParams(Map<String, String> params) {
        String[] keys = new String[params.size()];
        params.keySet().toArray(keys);
        Arrays.sort(keys, String.CASE_INSENSITIVE_ORDER);
        ArrayList<String> list = new ArrayList<>();
        for (String key : keys) {
            list.add(encodeUrl(key) + "=" + encodeUrl((String) params.get(key)));
        }
        return TextUtils.join("&", list);
    }
}